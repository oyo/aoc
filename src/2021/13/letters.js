exports.letters = C = {

    binary: [
        6922137, 15329694, 6916246,
        15309214, 16312463, 16312456,
        6917015, 10090905, 7479847,
        3215766, 10144425, 8947855,
        10484121, 10345401, 6920598,
        15310472, 6920631, 15310505,
        7889302, 7479842, 10066326,
        10066278, 10067958, 10053273,
        5591586, 15803535
    ],

    original: [
        [//A
            0b0110,
            0b1001,
            0b1001,
            0b1111,
            0b1001,
            0b1001
        ],
        [//B
            0b1110,
            0b1001,
            0b1110,
            0b1001,
            0b1001,
            0b1110
        ],
        [//C
            0b0110,
            0b1001,
            0b1000,
            0b1000,
            0b1001,
            0b0110
        ],
        [//D
            0b1110,
            0b1001,
            0b1001,
            0b1001,
            0b1001,
            0b1110
        ],
        [//E
            0b1111,
            0b1000,
            0b1110,
            0b1000,
            0b1000,
            0b1111
        ],
        [//F
            0b1111,
            0b1000,
            0b1110,
            0b1000,
            0b1000,
            0b1000
        ],
        [//G
            0b0110,
            0b1001,
            0b1000,
            0b1011,
            0b1001,
            0b0111
        ],
        [//H
            0b1001,
            0b1001,
            0b1111,
            0b1001,
            0b1001,
            0b1001
        ],
        [//I
            0b0111,
            0b0010,
            0b0010,
            0b0010,
            0b0010,
            0b0111
        ],
        [//J
            0b0011,
            0b0001,
            0b0001,
            0b0001,
            0b1001,
            0b0110
        ],
        [//K
            0b1001,
            0b1010,
            0b1100,
            0b1010,
            0b1010,
            0b1001
        ],
        [//L
            0b1000,
            0b1000,
            0b1000,
            0b1000,
            0b1000,
            0b1111
        ],
        [//M
            0b1001,
            0b1111,
            0b1111,
            0b1001,
            0b1001,
            0b1001
        ],
        [//N
            0b1001,
            0b1101,
            0b1101,
            0b1011,
            0b1011,
            0b1001
        ],
        [//O
            0b0110,
            0b1001,
            0b1001,
            0b1001,
            0b1001,
            0b0110
        ],
        [//P
            0b1110,
            0b1001,
            0b1001,
            0b1110,
            0b1000,
            0b1000
        ],
        [//Q
            0b0110,
            0b1001,
            0b1001,
            0b1001,
            0b1011,
            0b0111
        ],
        [//R
            0b1110,
            0b1001,
            0b1001,
            0b1110,
            0b1010,
            0b1001
        ],
        [//S
            0b0111,
            0b1000,
            0b0110,
            0b0001,
            0b1001,
            0b0110
        ],
        [//T
            0b0111,
            0b0010,
            0b0010,
            0b0010,
            0b0010,
            0b0010
        ],
        [//U
            0b1001,
            0b1001,
            0b1001,
            0b1001,
            0b1001,
            0b0110
        ],
        [//V
            0b1001,
            0b1001,
            0b1001,
            0b1001,
            0b0110,
            0b0110
        ],
        [//W
            0b1001,
            0b1001,
            0b1001,
            0b1111,
            0b1111,
            0b0110
        ],
        [//X
            0b1001,
            0b1001,
            0b0110,
            0b0110,
            0b1001,
            0b1001
        ],
        [//Y
            0b0101,
            0b0101,
            0b0101,
            0b0010,
            0b0010,
            0b0010
        ],
        [//Z
            0b1111,
            0b0001,
            0b0010,
            0b0100,
            0b1000,
            0b1111
        ]
    ],

    createBinary: () => C.original.map(d => d.reduce((n, c, i) => n | (c << ((5 - i) << 2)), 0)),

    toStringBinary: c => ('0000' + C.binary[c.toUpperCase().charCodeAt(0) - 'A'.charCodeAt(0)].toString(2))
        .substr(-24)
        .replace(/0/g, '.')
        .replace(/1/g, '#')
        .match(/[\.#]{1,4}/g)
        .join('\n'),

    dump: () => C.binary.map((_, i) => console.log(C.toStringBinary(String.fromCharCode(65 + i)) + '\n'))

}
