const SnailNumber = require('./SnailNumber')

const SAMPLE = [
    [
        [
            [1, 1],
            [2, 2],
            [3, 3],
            [4, 4]
        ],
        [[[[1, 1], [2, 2]], [3, 3]], [4, 4]]
    ],
    [
        [
            [1, 1],
            [2, 2],
            [3, 3],
            [4, 4],
            [5, 5]
        ],
        [[[[3, 0], [5, 3]], [4, 4]], [5, 5]]
    ],
    [
        [
            [1, 1],
            [2, 2],
            [3, 3],
            [4, 4],
            [5, 5],
            [6, 6]
        ],
        [[[[5, 0], [7, 4]], [5, 5]], [6, 6]]
    ],
    [
        [
            [[[0, [4, 5]], [0, 0]], [[[4, 5], [2, 6]], [9, 5]]],
            [7, [[[3, 7], [4, 3]], [[6, 3], [8, 8]]]],
            [[2, [[0, 8], [3, 4]]], [[[6, 7], 1], [7, [1, 6]]]],
            [[[[2, 4], 7], [6, [0, 5]]], [[[6, 8], [2, 8]], [[2, 1], [4, 5]]]],
            [7, [5, [[3, 8], [1, 4]]]],
            [[2, [2, 2]], [8, [8, 1]]],
            [2, 9],
            [1, [[[9, 3], 9], [[9, 0], [0, 7]]]],
            [[[5, [7, 4]], 7], 1],
            [[[[4, 2], 2], 6], [8, 7]]
        ],
        [[[[8, 7], [7, 7]], [[8, 6], [7, 7]]], [[[0, 7], [6, 6]], [8, 7]]]
    ]
]

it('parses', () => {
    expect(new SnailNumber('[2,4]').value).toEqual([2, 4])
})

it('reduces', () => {
    expect(new SnailNumber([[[[4, 3], 4], 4], [7, [[8, 4], 9]]]).add([1, 1]).value).toEqual([[[[0, 7], 4], [[7, 8], [6, 0]]], [8, 1]])
    expect(new SnailNumber(
        [[[[1, 1], [2, 2]], [3, 3]], [4, 4]]
    ).add([5, 5]).value).toEqual(
        [[[[3, 0], [5, 3]], [4, 4]], [5, 5]]
    )
})

it('adds', () => {
    const s = new SnailNumber([[[0, [4, 5]], [0, 0]], [[[4, 5], [2, 6]], [9, 5]]])
    expect(s.add(
        [7, [[[3, 7], [4, 3]], [[6, 3], [8, 8]]]]
    ).value).toEqual(
        [[[[4, 0], [5, 4]], [[7, 7], [6, 0]]], [[8, [7, 7]], [[7, 9], [5, 0]]]]
    )
    expect(s.add(
        [[2, [[0, 8], [3, 4]]], [[[6, 7], 1], [7, [1, 6]]]]
    ).value).toEqual(
        [[[[6, 7], [6, 7]], [[7, 7], [0, 7]]], [[[8, 7], [7, 7]], [[8, 8], [8, 0]]]]
    )
    expect(s.add(
        [[[[2, 4], 7], [6, [0, 5]]], [[[6, 8], [2, 8]], [[2, 1], [4, 5]]]]
    ).value).toEqual(
        [[[[7, 0], [7, 7]], [[7, 7], [7, 8]]], [[[7, 7], [8, 8]], [[7, 7], [8, 7]]]]
    )
    expect(s.add(
        [7, [5, [[3, 8], [1, 4]]]]
    ).value).toEqual(
        [[[[7, 7], [7, 8]], [[9, 5], [8, 7]]], [[[6, 8], [0, 8]], [[9, 9], [9, 0]]]]
    )
    expect(s.add(
        [[2, [2, 2]], [8, [8, 1]]]
    ).value).toEqual(
        [[[[6, 6], [6, 6]], [[6, 0], [6, 7]]], [[[7, 7], [8, 9]], [8, [8, 1]]]]
    )
})

it('adds list', () => SAMPLE.forEach(s =>
    expect(SnailNumber.addNumbers(s[0]).value).toEqual(s[1])
))

it('calcs magnitude', () => {
    expect(new SnailNumber([9, 1]).magnitude()).toEqual(29)
    expect(new SnailNumber([[9, 1], [1, 9]]).magnitude()).toEqual(129)
    expect(new SnailNumber([[[[6, 6], [7, 6]], [[7, 7], [7, 0]]], [[[7, 7], [7, 7]], [[7, 8], [9, 9]]]]).magnitude()).toEqual(4140)
})
